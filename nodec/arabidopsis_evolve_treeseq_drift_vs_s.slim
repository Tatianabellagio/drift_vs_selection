// Author: Tati
// simulate evolution of qtl under different environments defined by an optima file using tree seq from grenenet vcf file

initialize() {
	//setSeed(1455193095666);
	
	//constants
	
	// import optima_file, txt with optima values for each environment 
	//optimas = readFile(optima_file);                                                                                             DECOMMENT FOR PRODUCTION
	// the optima will be a value from 0 to # of environments to call the slim script once per each env and one optima value
	// this is just goign to be an index to pick one value from the optima_file
	//if (!exists("optima"))defineConstant('optima', 0);                                                                            DECOMMENT FOR PRODUCTION
	// using the index to pick the optima value for this run 
	//defineConstant('optima_value', 2); // asFloat(optimas[asInteger(optima)]));                                                     DECOMMENT FOR PRODUCTION
	// the slim script can be run defining the number of generation to run and the number of replicated per optima/environment
	if (!exists("tree"))defineConstant('tree', 'test3august25.trees');
	if (!exists("gen_to_run"))defineConstant('gen_to_run', 4);
	
	// for the seelction vs drift project we define 3 var 
	// variances passed through bash 
	if (!exists('variance'))defineConstant('variance', 1);
	if (!exists('drift_run'))defineConstant('drift_run', 1);
	//define heritability 
	defineConstant('h2', 0.4);
	// optima values pass through bash 
	if (!exists("optima_value"))defineConstant('optima_value', 1);
	
	initializeSLiMModelType("nonWF");
	initializeTreeSeq(retainCoalescentOnly=F);
	initializeMutationRate(0);
	initializeMutationType("m0", 0, "f", 0.0);
	m0.convertToSubstitution = F;
	initializeGenomicElementType("g1", m0, 1.0);
	// the genomic element will be of the size of the arabidopsis genome
	initializeGenomicElement(g1, 0, 119146347);
	// setting up the recombination rates in between chromosomes 
	//rates = c(3e-6, 0.5, 3e-6, 0.5, 3e-6, 0.5, 3e-6, 0.5, 3e-6);
	//ends = c(30427670, 30427671, 50125959, 50125960, 73585789, 73585790, 92170845, 92170846, 119146347);
	//initializeRecombinationRate(rates, ends);
    initializeRecombinationRate(0);


}

1 first() {
	// import tree of arabidopsis 5 chromosomes 
	sim.readFromPopulationFile(tree);
	//sim.outputMutations(sim.mutationsOfType(m0));
	
	// population size control 
	// if (sim.subpopulations[0].individualCount > 300){
	//		number_to_kill = sim.subpopulations[0].individualCount - 300;		
	//		sim.killIndividuals(sim.subpopulations[0].sampleIndividuals(number_to_kill));
	//		}

}

1 reproduction() {
	// this first reproduction callbacks has the purpose of increasing the population size 
	// for each of the individuals 
	for (ind in sim.subpopulations[0].individuals){
		// add 5 clones 
		for (i in 1:10){
			sim.subpopulations[0].addCloned(ind);
		}
	}
	self.active = 0;
}

// I will always keep the effect of the mutations neutral 
// becuase I am actually using their effect as an effect size 
1:999 mutationEffect(m0) {
	return 1.;
}

//this is all commented for DRIFT 
//2:999 early(){
// This callback is the one actually caclulating fitness in a vectorized way so it can be used in the fitnessEffect and reproduciton callback 
//	inds =  sim.subpopulations.individuals;
// calculate their additive genetic value 
//	additive = inds.sumOfMutationsOfType(m0);
//print(additive);
//	VA = sd(additive)^2;
// from h2 and VA calculate VE
//	VE = (VA - h2 * VA) / h2;    // from h2 = VA / (VA + VE)   
// save it for this tick 
//	env_noise = rnorm(size(inds), 0.0, sqrt(VE));
//calculate phenotype
//	phenotype = additive + env_noise;
//calculate fitness 
//	fitness = exp(-0.5 * ((phenotype - asFloat(optima_value))^2)/asFloat(variance));
// set up the fitness of the population to be usen in the reproduction callback
//	sim.subpopulations[0].setValue('fitness', fitness);
//set up the fitness for each individual to be used in the fitnesseffect callback
//	for (i in 0:(size(sim.subpopulations[0].individuals)-1)) {
//		inds[i].setValue('fitness', fitness[i]);
//	}

//}


//2:999 fitnessEffect() {
//	fitness = individual.getValue("fitness");
//	return ifelse(individual.age <=1, fitness, 0.0);
//}


3:999 reproduction() {
	// only run this if population size if greater than 0, would run into error otherwise 
	if (sim.subpopulations[0].individualCount > 0){
		
		//fitness = sim.subpopulations[0].getValue("fitness");
		
		offspring = rep(5, sim.subpopulations[0].individualCount);  //max number of offsrping 
		//offspring = asInteger(floor((offspring)));
		
		// loop over each of the individuals in the population
		for (j in 0:(size(sim.subpopulations[0].individuals)-1)) {
			// for each individual cehck their expected offspring size and based on that
			// for each offspring based on a chance of 97% make it a selfer offscpring or an outcross offspring 
			for (k in seqLen(offspring[j])) {
				if (runif(1) < 0.97)
				{
					sim.subpopulations[0].addSelfed(sim.subpopulations[0].individuals[j]);
				}
				//else
				//{
				//	//for the outcrossign event chose at random another individual from teh population 
				//	mate = sim.subpopulations[0].sampleIndividuals(1);
				//	sim.subpopulations[0].addCrossed(sim.subpopulations[0].individuals[j], mate);
				//}
			}
		}
	}
	self.active = 0;
}

2 late(){
	// first density based control 

	if (sim.subpopulations[0].individualCount > 900){
		number_to_kill = sim.subpopulations[0].individualCount - 900;
		sim.killIndividuals(sim.subpopulations[0].sampleIndividuals(number_to_kill));
	}

}


3:4 late(){
	// we have noneveralpping generation so first kill all individuals that were not born in thsi tick 
	inds = sim.subpopulations.individuals; 
	sim.killIndividuals(inds[inds.age > 0]);
	// if after the survival event the population size is too big adjust it 

	if (sim.subpopulations[0].individualCount > 900){
		number_to_kill = sim.subpopulations[0].individualCount - 900;
		sim.killIndividuals(sim.subpopulations[0].sampleIndividuals(number_to_kill));
	}

}

5 late() {
	// we have noneveralpping generation so first kill all individuals that were not born in thsi tick 
	inds = sim.subpopulations.individuals; 
	sim.killIndividuals(inds[inds.age > 0]);
    print(inds.age);
	// if after the survival event the population size is too big adjust it 
	if (sim.subpopulations[0].individualCount > 900){
		number_to_kill = sim.subpopulations[0].individualCount - 900;
		sim.killIndividuals(sim.subpopulations[0].sampleIndividuals(number_to_kill));
	}
	//output treeseq 
	sim.treeSeqOutput('drift_nocrossin_norec' + drift_run + "_result.trees");
	
	//output phenotypes for easy ecotype count
	inds = sim.subpopulations[0].individuals; 
	additive = inds.sumOfMutationsOfType(m0); 
	catn(additive + ",");
    
    sim.simulationFinished(); 
	
}


/*
print('start to read');
	sim.readFromPopulationFile("whole_genome_only_causalmut.trees");
	sim.outputMutations(sim.mutationsOfType(m0));
	m0muts = sim.mutationsOfType(m0);
	for (index in seqAlong(m0muts))
		m0muts[index].setSelectionCoeff(-0.5);
	
	m0muts[0].setSelectionCoeff(0.5);
	m0muts[1].setSelectionCoeff(0.5);
	m0muts[2].setSelectionCoeff(0.5);
	print('new');
	
	sim.outputMutations(sim.mutationsOfType(m0));
	//sim.outputVCF('test.vcf');
	//cat(paste( sim.mutations, sep="\n"));


1 early() {
	// after i creaed all of those individuals I reset all their ages to 0 
	print(sim.subpopulations[0].individuals.age);
	sim.subpopulations[0].individuals.age = rep(1, sim.subpopulations[0].individualCount);
	print(sim.subpopulations[0].individuals.age);
	}
	
	
2:999 late() {
	// if after the survival event the population size is too big adjust it 
	if (sim.subpopulations[0].individualCount > 300){
		number_to_kill = sim.subpopulations[0].individualCount - 300;
		sim.killIndividuals(sim.subpopulations[0].sampleIndividuals(number_to_kill));
	}
}
